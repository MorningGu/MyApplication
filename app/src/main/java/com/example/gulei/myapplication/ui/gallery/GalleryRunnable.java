package com.example.gulei.myapplication.ui.gallery;import android.database.Cursor;import android.os.Bundle;import android.os.Message;import android.provider.MediaStore;import android.text.TextUtils;import com.example.gulei.myapplication.GApplication;import java.io.File;import java.lang.ref.WeakReference;import java.util.ArrayList;import java.util.HashMap;import java.util.Iterator;import java.util.List;import java.util.Map;public class GalleryRunnable implements Runnable {	private WeakReference<GalleryHandler> mGalleryhandler;	private boolean mHasCamera = true;	public GalleryRunnable(GalleryHandler galleryHandler, boolean hasCamera)	{		mGalleryhandler = new WeakReference<GalleryHandler>(galleryHandler);		mHasCamera = hasCamera;	}		@Override	public void run() {		List<ImageViewHolder> imgs = new ArrayList<ImageViewHolder>();		List<GalleryImageFloder> imageFloders = new ArrayList<GalleryImageFloder>();		getColumnData(imgs);		setFloderImages(imgs, imageFloders);		Bundle bundle = new Bundle();		bundle.putSerializable("gallery_vo", new GalleryVo(imgs, imageFloders));		GalleryHandler galleryHandler = mGalleryhandler.get();		if(galleryHandler == null)		{			return;		}		Message msg = galleryHandler.obtainMessage();		msg.what = galleryHandler.SCAN_PIC;		msg.setData(bundle);		galleryHandler.sendMessage(msg);	}	private synchronized void getColumnData(List<ImageViewHolder> imgs) {			Cursor imagecursor = null;			try{				String[] columns = { MediaStore.Images.Media.DATA,						MediaStore.Images.Media._ID,						MediaStore.Images.Media.BUCKET_DISPLAY_NAME };				String orderBy = MediaStore.Images.Media.DATE_TAKEN;				imagecursor = GApplication.getInstance().getApplicationContext().getContentResolver().query(						MediaStore.Images.Media.EXTERNAL_CONTENT_URI, columns, null,						null, orderBy + " DESC");				if(imagecursor == null  ){					return;				}				imagecursor.moveToFirst();				do {					String path = imagecursor.getString(imagecursor							.getColumnIndex(MediaStore.Images.Media.DATA));					String pathName = imagecursor.getString(imagecursor							.getColumnIndex(MediaStore.Images.Media.BUCKET_DISPLAY_NAME));					if(!TextUtils.isEmpty(path)&&!TextUtils.isEmpty(pathName)){						ImageViewHolder holder = new ImageViewHolder();						holder.setImage_path(path);						holder.setParentPathName(pathName);						if(isFileExsitsAndNotGIF(holder.getImage_path()))							imgs.add(holder);					}				} while (imagecursor.moveToNext());		}catch(Exception e){		}finally{			if(imagecursor != null){				imagecursor.close();			}		}	}	private Boolean isFileExsitsAndNotGIF(String path) {		if(!TextUtils.isEmpty(path)){			File file = new File(path);			if (file.exists()) {				if(path.endsWith("gif")||path.endsWith("GIF"))					return false;				return true;			}		}		return false;	}		private void setFloderImages(List<ImageViewHolder> imgs, List<GalleryImageFloder> imageFloders) {		Map<String, GalleryImageFloder> hashImgs = new HashMap<String, GalleryImageFloder>();		for (ImageViewHolder tmp : imgs) {			if (hashImgs.containsKey(tmp.getParentPathName())) {				GalleryImageFloder gif = hashImgs.get(tmp.getParentPathName());				gif.getFileList().add(tmp);				hashImgs.put(tmp.getParentPathName(), gif);			} else {				GalleryImageFloder gif = new GalleryImageFloder();				gif.setFirstImagePath(tmp.getImage_path());				gif.setName(tmp.getParentPathName());				gif.getFileList().add(tmp);				hashImgs.put(tmp.getParentPathName(), gif);			}		}		if (!hashImgs.isEmpty()) {			Iterator iter = hashImgs.entrySet().iterator();			while (iter.hasNext()) {				Map.Entry entry = (Map.Entry) iter.next();				imageFloders.add((GalleryImageFloder) entry.getValue());			}		}		if(mHasCamera)		{			ImageViewHolder allIVH = new ImageViewHolder();			allIVH.setImage_path("photo");			imgs.add(0, allIVH);		}		GalleryImageFloder firstGIF = new GalleryImageFloder();		firstGIF.setFileList(imgs);		firstGIF.setName("所有图片");		if(mHasCamera) {			if (imgs.size() >= 2) {				firstGIF.setFirstImagePath(imgs.get(1).getImage_path());				imageFloders.add(0, firstGIF);			}		}else{			if (imgs.size() >= 1) {				firstGIF.setFirstImagePath(imgs.get(0).getImage_path());				imageFloders.add(0, firstGIF);			}		}	}}